// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package checkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChecklistServiceClient is the client API for ChecklistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChecklistServiceClient interface {
	Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	CreateChecklist(ctx context.Context, in *CreateChecklistRequest, opts ...grpc.CallOption) (*CreateChecklistResponse, error)
	ReadChecklistByID(ctx context.Context, in *ReadChecklistRequest, opts ...grpc.CallOption) (*ReadChecklistResponse, error)
	ReadChecklistByQuery(ctx context.Context, in *ReadChecklistQueryRequest, opts ...grpc.CallOption) (ChecklistService_ReadChecklistByQueryClient, error)
	UpdateChecklist(ctx context.Context, in *UpdateChecklistRequest, opts ...grpc.CallOption) (*UpdateChecklistResponse, error)
	DeleteCheckist(ctx context.Context, in *DeleteChecklistRequest, opts ...grpc.CallOption) (*DeleteChecklistResponse, error)
	AllCheclkists(ctx context.Context, in *ListChecklistRequest, opts ...grpc.CallOption) (ChecklistService_AllCheclkistsClient, error)
	CreateBulkChecklist(ctx context.Context, opts ...grpc.CallOption) (ChecklistService_CreateBulkChecklistClient, error)
}

type checklistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChecklistServiceClient(cc grpc.ClientConnInterface) ChecklistServiceClient {
	return &checklistServiceClient{cc}
}

func (c *checklistServiceClient) Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/checklist.ChecklistService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) CreateChecklist(ctx context.Context, in *CreateChecklistRequest, opts ...grpc.CallOption) (*CreateChecklistResponse, error) {
	out := new(CreateChecklistResponse)
	err := c.cc.Invoke(ctx, "/checklist.ChecklistService/CreateChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) ReadChecklistByID(ctx context.Context, in *ReadChecklistRequest, opts ...grpc.CallOption) (*ReadChecklistResponse, error) {
	out := new(ReadChecklistResponse)
	err := c.cc.Invoke(ctx, "/checklist.ChecklistService/ReadChecklistByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) ReadChecklistByQuery(ctx context.Context, in *ReadChecklistQueryRequest, opts ...grpc.CallOption) (ChecklistService_ReadChecklistByQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChecklistService_ServiceDesc.Streams[0], "/checklist.ChecklistService/ReadChecklistByQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &checklistServiceReadChecklistByQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChecklistService_ReadChecklistByQueryClient interface {
	Recv() (*ReadChecklistResponse, error)
	grpc.ClientStream
}

type checklistServiceReadChecklistByQueryClient struct {
	grpc.ClientStream
}

func (x *checklistServiceReadChecklistByQueryClient) Recv() (*ReadChecklistResponse, error) {
	m := new(ReadChecklistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *checklistServiceClient) UpdateChecklist(ctx context.Context, in *UpdateChecklistRequest, opts ...grpc.CallOption) (*UpdateChecklistResponse, error) {
	out := new(UpdateChecklistResponse)
	err := c.cc.Invoke(ctx, "/checklist.ChecklistService/UpdateChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) DeleteCheckist(ctx context.Context, in *DeleteChecklistRequest, opts ...grpc.CallOption) (*DeleteChecklistResponse, error) {
	out := new(DeleteChecklistResponse)
	err := c.cc.Invoke(ctx, "/checklist.ChecklistService/DeleteCheckist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) AllCheclkists(ctx context.Context, in *ListChecklistRequest, opts ...grpc.CallOption) (ChecklistService_AllCheclkistsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChecklistService_ServiceDesc.Streams[1], "/checklist.ChecklistService/AllCheclkists", opts...)
	if err != nil {
		return nil, err
	}
	x := &checklistServiceAllCheclkistsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChecklistService_AllCheclkistsClient interface {
	Recv() (*ListChecklistResponse, error)
	grpc.ClientStream
}

type checklistServiceAllCheclkistsClient struct {
	grpc.ClientStream
}

func (x *checklistServiceAllCheclkistsClient) Recv() (*ListChecklistResponse, error) {
	m := new(ListChecklistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *checklistServiceClient) CreateBulkChecklist(ctx context.Context, opts ...grpc.CallOption) (ChecklistService_CreateBulkChecklistClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChecklistService_ServiceDesc.Streams[2], "/checklist.ChecklistService/CreateBulkChecklist", opts...)
	if err != nil {
		return nil, err
	}
	x := &checklistServiceCreateBulkChecklistClient{stream}
	return x, nil
}

type ChecklistService_CreateBulkChecklistClient interface {
	Send(*CreateChecklistRequest) error
	Recv() (*CreateChecklistResponse, error)
	grpc.ClientStream
}

type checklistServiceCreateBulkChecklistClient struct {
	grpc.ClientStream
}

func (x *checklistServiceCreateBulkChecklistClient) Send(m *CreateChecklistRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *checklistServiceCreateBulkChecklistClient) Recv() (*CreateChecklistResponse, error) {
	m := new(CreateChecklistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChecklistServiceServer is the server API for ChecklistService service.
// All implementations must embed UnimplementedChecklistServiceServer
// for forward compatibility
type ChecklistServiceServer interface {
	Echo(context.Context, *StringMessage) (*StringMessage, error)
	CreateChecklist(context.Context, *CreateChecklistRequest) (*CreateChecklistResponse, error)
	ReadChecklistByID(context.Context, *ReadChecklistRequest) (*ReadChecklistResponse, error)
	ReadChecklistByQuery(*ReadChecklistQueryRequest, ChecklistService_ReadChecklistByQueryServer) error
	UpdateChecklist(context.Context, *UpdateChecklistRequest) (*UpdateChecklistResponse, error)
	DeleteCheckist(context.Context, *DeleteChecklistRequest) (*DeleteChecklistResponse, error)
	AllCheclkists(*ListChecklistRequest, ChecklistService_AllCheclkistsServer) error
	CreateBulkChecklist(ChecklistService_CreateBulkChecklistServer) error
	mustEmbedUnimplementedChecklistServiceServer()
}

// UnimplementedChecklistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChecklistServiceServer struct {
}

func (UnimplementedChecklistServiceServer) Echo(context.Context, *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedChecklistServiceServer) CreateChecklist(context.Context, *CreateChecklistRequest) (*CreateChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChecklist not implemented")
}
func (UnimplementedChecklistServiceServer) ReadChecklistByID(context.Context, *ReadChecklistRequest) (*ReadChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChecklistByID not implemented")
}
func (UnimplementedChecklistServiceServer) ReadChecklistByQuery(*ReadChecklistQueryRequest, ChecklistService_ReadChecklistByQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadChecklistByQuery not implemented")
}
func (UnimplementedChecklistServiceServer) UpdateChecklist(context.Context, *UpdateChecklistRequest) (*UpdateChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChecklist not implemented")
}
func (UnimplementedChecklistServiceServer) DeleteCheckist(context.Context, *DeleteChecklistRequest) (*DeleteChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckist not implemented")
}
func (UnimplementedChecklistServiceServer) AllCheclkists(*ListChecklistRequest, ChecklistService_AllCheclkistsServer) error {
	return status.Errorf(codes.Unimplemented, "method AllCheclkists not implemented")
}
func (UnimplementedChecklistServiceServer) CreateBulkChecklist(ChecklistService_CreateBulkChecklistServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBulkChecklist not implemented")
}
func (UnimplementedChecklistServiceServer) mustEmbedUnimplementedChecklistServiceServer() {}

// UnsafeChecklistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChecklistServiceServer will
// result in compilation errors.
type UnsafeChecklistServiceServer interface {
	mustEmbedUnimplementedChecklistServiceServer()
}

func RegisterChecklistServiceServer(s grpc.ServiceRegistrar, srv ChecklistServiceServer) {
	s.RegisterService(&ChecklistService_ServiceDesc, srv)
}

func _ChecklistService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checklist.ChecklistService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).Echo(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_CreateChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).CreateChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checklist.ChecklistService/CreateChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).CreateChecklist(ctx, req.(*CreateChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_ReadChecklistByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).ReadChecklistByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checklist.ChecklistService/ReadChecklistByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).ReadChecklistByID(ctx, req.(*ReadChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_ReadChecklistByQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadChecklistQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChecklistServiceServer).ReadChecklistByQuery(m, &checklistServiceReadChecklistByQueryServer{stream})
}

type ChecklistService_ReadChecklistByQueryServer interface {
	Send(*ReadChecklistResponse) error
	grpc.ServerStream
}

type checklistServiceReadChecklistByQueryServer struct {
	grpc.ServerStream
}

func (x *checklistServiceReadChecklistByQueryServer) Send(m *ReadChecklistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChecklistService_UpdateChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).UpdateChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checklist.ChecklistService/UpdateChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).UpdateChecklist(ctx, req.(*UpdateChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_DeleteCheckist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).DeleteCheckist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checklist.ChecklistService/DeleteCheckist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).DeleteCheckist(ctx, req.(*DeleteChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_AllCheclkists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListChecklistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChecklistServiceServer).AllCheclkists(m, &checklistServiceAllCheclkistsServer{stream})
}

type ChecklistService_AllCheclkistsServer interface {
	Send(*ListChecklistResponse) error
	grpc.ServerStream
}

type checklistServiceAllCheclkistsServer struct {
	grpc.ServerStream
}

func (x *checklistServiceAllCheclkistsServer) Send(m *ListChecklistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChecklistService_CreateBulkChecklist_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChecklistServiceServer).CreateBulkChecklist(&checklistServiceCreateBulkChecklistServer{stream})
}

type ChecklistService_CreateBulkChecklistServer interface {
	Send(*CreateChecklistResponse) error
	Recv() (*CreateChecklistRequest, error)
	grpc.ServerStream
}

type checklistServiceCreateBulkChecklistServer struct {
	grpc.ServerStream
}

func (x *checklistServiceCreateBulkChecklistServer) Send(m *CreateChecklistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *checklistServiceCreateBulkChecklistServer) Recv() (*CreateChecklistRequest, error) {
	m := new(CreateChecklistRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChecklistService_ServiceDesc is the grpc.ServiceDesc for ChecklistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChecklistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checklist.ChecklistService",
	HandlerType: (*ChecklistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ChecklistService_Echo_Handler,
		},
		{
			MethodName: "CreateChecklist",
			Handler:    _ChecklistService_CreateChecklist_Handler,
		},
		{
			MethodName: "ReadChecklistByID",
			Handler:    _ChecklistService_ReadChecklistByID_Handler,
		},
		{
			MethodName: "UpdateChecklist",
			Handler:    _ChecklistService_UpdateChecklist_Handler,
		},
		{
			MethodName: "DeleteCheckist",
			Handler:    _ChecklistService_DeleteCheckist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadChecklistByQuery",
			Handler:       _ChecklistService_ReadChecklistByQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AllCheclkists",
			Handler:       _ChecklistService_AllCheclkists_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateBulkChecklist",
			Handler:       _ChecklistService_CreateBulkChecklist_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "checkpb/check.proto",
}
